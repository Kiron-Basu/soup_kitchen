{"version":3,"sources":["Main/Store/OrderBundle.ts","Main/Utilities/InvoiceUtilities.ts","Main/Enums/FoodItems.ts","Store.ts","Main/Components/OrderItem.tsx","Main/Components/OrderSummary.tsx","Main/Components/OrderSection.tsx","Main/Components/AppBar.tsx","Main/Components/MenuItem.tsx","Main/Components/MenuSection.tsx","Main/Components/Container.tsx","App.tsx","index.tsx"],"names":["ActionTypes","actionCreators","item","type","CLEAR_ITEM","quantity","ADD_TO_CART","processAddToCart","state","action","subtotal","price","processClearItem","orderReducer","bread","cheese","milk","butter","soup","FoodItem","poundify","num","toFixed","store","OrderItem","React","forwardRef","props","ref","foodItem","handleClearItem","className","color","onClick","Divider","variant","OrderSummary","preDiscountTotal","discounts","List","some","discount","map","i","ListItem","fontSize","renderDiscounts","Typography","grandTotal","reduce","acc","val","gutterBottom","renderTotal","Button","size","disabled","dispatch","undefined","getReducers","orderState","connect","order","foodLabels","Object","values","totalBeforeDiscounts","Math","floor","getDiscounts","createRef","label","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","useState","open","setOpen","defaultState","keys","body","AppBar","position","Toolbar","IconButton","edge","aria-label","Modal","tabIndex","onClose","aria-labelledby","aria-describedby","DialogContent","MenuItem","str","addToCart","quantityState","setQuantityState","updatedState","setUpdatedState","Card","CardHeader","charAt","toUpperCase","slice","CardContent","component","setTimeout","MenuSection","Container","App","initialState","reducer","combineReducers","createStore","composeWithDevTools","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99e074e7.chunk.js","sourcesContent":["import { FoodItem } from \"../Enums/FoodItems\";\r\n\r\n// Action Types\r\nexport enum ActionTypes {\r\n  ADD_ITEM = \"ORDER_ADD_ITEM\",\r\n  CLEAR_ITEM = \"ORDER_CLEAR_ITEM\",\r\n  REMOVE_ITEM = \"ORDER_REMOVE_ITEM\",\r\n  ADD_TO_CART = \"ADD_TO_CART\",\r\n}\r\n\r\n//Action Interfaces\r\nexport interface IAddItemAction {\r\n  type: ActionTypes.ADD_ITEM;\r\n  item: FoodItem;\r\n}\r\n\r\nexport interface IClearItemAction {\r\n  type: ActionTypes.CLEAR_ITEM;\r\n  item: FoodItem;\r\n}\r\n\r\nexport interface IRemoveItemAction {\r\n  type: ActionTypes.REMOVE_ITEM;\r\n  item: FoodItem;\r\n}\r\n\r\nexport interface IAddToCartAction {\r\n  type: ActionTypes.ADD_TO_CART;\r\n  item: FoodItem;\r\n  quantity: number;\r\n}\r\n\r\n// Consolidate Action Interfaces\r\ntype Actions =\r\n  | IAddItemAction\r\n  | IRemoveItemAction\r\n  | IAddToCartAction\r\n  | IClearItemAction;\r\n\r\n// Action Creators\r\nexport const actionCreators = {\r\n  addItem(item: FoodItem): IAddItemAction {\r\n    return {\r\n      type: ActionTypes.ADD_ITEM,\r\n      item: item,\r\n    };\r\n  },\r\n\r\n  clearItem(item: FoodItem): IClearItemAction {\r\n    return {\r\n      type: ActionTypes.CLEAR_ITEM,\r\n      item: item,\r\n    };\r\n  },\r\n\r\n  removeItem(item: FoodItem): IRemoveItemAction {\r\n    return {\r\n      type: ActionTypes.REMOVE_ITEM,\r\n      item: item,\r\n    };\r\n  },\r\n\r\n  addToCart(item: FoodItem, quantity: number): IAddToCartAction {\r\n    return {\r\n      type: ActionTypes.ADD_TO_CART,\r\n      item: item,\r\n      quantity: quantity,\r\n    };\r\n  },\r\n};\r\nexport interface IOrderItem {\r\n  price: number;\r\n  quantity: number;\r\n  subtotal: number;\r\n}\r\n// Shape of store\r\nexport interface IOrderState {\r\n  bread: IOrderItem;\r\n  cheese: IOrderItem;\r\n  milk: IOrderItem;\r\n  butter: IOrderItem;\r\n  soup: IOrderItem;\r\n}\r\n\r\n// Default store\r\nexport function getInitialOrderState(): Readonly<IOrderState> {\r\n  return {\r\n    bread: { price: 110, quantity: 0, subtotal: 0 },\r\n    cheese: { price: 90, quantity: 0, subtotal: 0 },\r\n    milk: { price: 50, quantity: 0, subtotal: 0 },\r\n    butter: { price: 120, quantity: 0, subtotal: 0 },\r\n    soup: { price: 60, quantity: 0, subtotal: 0 },\r\n  };\r\n}\r\n\r\nfunction processAddToCart(\r\n  state: IOrderState,\r\n  action: IAddToCartAction\r\n): IOrderState {\r\n  return {\r\n    ...state,\r\n    [action.item]: {\r\n      ...state[action.item],\r\n      quantity: action.quantity,\r\n      subtotal: action.quantity * state[action.item].price,\r\n    },\r\n  };\r\n}\r\n\r\nfunction processClearItem(\r\n  state: IOrderState,\r\n  action: IClearItemAction\r\n): IOrderState {\r\n  return {\r\n    ...state,\r\n    [action.item]: {\r\n      ...state[action.item],\r\n      quantity: 0,\r\n      subtotal: 0,\r\n    },\r\n  };\r\n}\r\n\r\n// Reducer\r\nexport default function orderReducer(\r\n  state: IOrderState = getInitialOrderState(),\r\n  action: Actions\r\n): IOrderState {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_TO_CART:\r\n      return processAddToCart(state, action);\r\n    case ActionTypes.CLEAR_ITEM:\r\n      return processClearItem(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { IDiscount } from \"../Interfaces/IDiscount\";\r\nimport { IOrderState } from \"../Store/OrderBundle\";\r\n\r\nexport function totalBeforeDiscounts(order: IOrderState): number {\r\n  return Object.values(order).reduce((acc, val) => {\r\n    return (acc += val.subtotal);\r\n  }, 0);\r\n}\r\n\r\nexport function getDiscounts(order: IOrderState): ReadonlyArray<IDiscount> {\r\n  const butterDiscount = order.butter.subtotal / 3;\r\n  const cheeseDiscount =\r\n    Math.floor(order.cheese.quantity / 2) * order.cheese.price;\r\n  const soupDiscount =\r\n    order.bread.quantity <= order.soup.quantity\r\n      ? order.bread.subtotal / 2\r\n      : (order.bread.price / 2) * order.soup.quantity;\r\n\r\n  return [\r\n    { type: \"butter discount\", discount: butterDiscount },\r\n    { type: \"cheese discount\", discount: cheeseDiscount },\r\n    { type: \"bread discount\", discount: soupDiscount },\r\n  ];\r\n}\r\n\r\nexport const poundify = (num: number) => `£${(num / 100).toFixed(2)}`;\r\n\r\nexport const capitalise = (str: string) => {\r\n  if (typeof str !== \"string\") return \"\";\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n","export enum FoodItem {\r\n  bread = \"bread\",\r\n  cheese = \"cheese\",\r\n  milk = \"milk\",\r\n  butter = \"butter\",\r\n  soup = \"soup\",\r\n}\r\n","import { createStore, Reducer, combineReducers, Store } from \"redux\";\r\nimport orderReducer, { getInitialOrderState } from \"./Main/Store/OrderBundle\";\r\nimport { IState } from \"./Main/Store/IState\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport let store: Readonly<Store<IState>>;\r\n\r\nexport function dispatch(action: { type: string }): void {\r\n  if (store !== undefined) {\r\n    store.dispatch(action);\r\n  }\r\n}\r\n\r\nfunction getReducers(): {} {\r\n  return {\r\n    orderState: orderReducer,\r\n  };\r\n}\r\n\r\nexport default function configureStore(\r\n  initialState = { orderState: getInitialOrderState() }\r\n) {\r\n  const reducer: Reducer<{}> = combineReducers(getReducers());\r\n  return createStore(reducer, initialState, composeWithDevTools());\r\n}\r\n\r\nexport function setStore(setAsStore: Readonly<Store<IState>>): void {\r\n  store = setAsStore;\r\n}\r\n","import React, { RefObject } from \"react\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nimport { poundify } from \"../Utilities/InvoiceUtilities\";\r\nimport { FoodItem } from \"../Enums/FoodItems\";\r\nimport \"../Styles/OrderItem.scss\";\r\n\r\n\r\ninterface IOrderItem {\r\n  foodItem: string;\r\n  quantity: number;\r\n  subtotal: number;\r\n  handleClearItem: (item: FoodItem) => void;\r\n  ref: RefObject<SVGSVGElement>;\r\n}\r\n//@ts-ignore for now\r\nexport const OrderItem: React.FC<IOrderItem> = React.forwardRef(\r\n  (props, ref): JSX.Element => {\r\n    const { foodItem, quantity, subtotal, handleClearItem } = props;\r\n\r\n    return (\r\n      <div className=\"orderItem\">\r\n        <p className=\"orderItem__description\">\r\n          {foodItem} x {quantity} &nbsp; &nbsp; | &nbsp; &nbsp;{\" \"}\r\n          {poundify(subtotal)}\r\n        </p>\r\n        <DeleteIcon\r\n          ref={ref}\r\n          className=\"orderItem__deleteIcon\"\r\n          color=\"secondary\"\r\n          onClick={() =>\r\n            handleClearItem(FoodItem[foodItem as keyof typeof FoodItem])\r\n          }\r\n        />\r\n        <Divider variant=\"fullWidth\" />\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { \r\n  Button,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  Typography \r\n} from \"@material-ui/core\";\r\nimport MoneyOffIcon from \"@material-ui/icons/MoneyOff\";\r\n\r\nimport { IDiscount } from \"../Interfaces/IDiscount\";\r\nimport { poundify } from \"../Utilities/InvoiceUtilities\";\r\nimport \"../Styles/OrderSummary.scss\";\r\n\r\ninterface IOrderSummary {\r\n  preDiscountTotal: number;\r\n  discounts: ReadonlyArray<IDiscount>;\r\n}\r\n\r\nexport const OrderSummary: React.FC<IOrderSummary> = ({\r\n  preDiscountTotal,\r\n  discounts,\r\n}) => {\r\n  return (\r\n    <List className=\"orderSummary\">\r\n      {preDiscountTotal <= 0 ? <h5>Your cart is empty!</h5> : null}\r\n      {renderDiscounts()}\r\n      {renderSubTotal()}\r\n      {renderTotal()}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        size=\"large\"\r\n        disabled={preDiscountTotal <= 0}\r\n      >\r\n        Order\r\n      </Button>\r\n    </List>\r\n  );\r\n\r\n  function renderSubTotal() {\r\n    return preDiscountTotal > 0 ? (\r\n      <Typography variant=\"h6\">\r\n        <Divider />\r\n        <div className=\"orderSummary__subtotal\">\r\n          Subtotal: {poundify(preDiscountTotal)}\r\n        </div>\r\n      </Typography>\r\n    ) : null;\r\n  }\r\n\r\n  function renderTotal() {\r\n    const grandTotal: number =\r\n      preDiscountTotal -\r\n      discounts.reduce((acc, val) => {\r\n        return (acc += val.discount);\r\n      }, 0);\r\n    return grandTotal > 0 ? (\r\n      <Typography variant=\"h5\" gutterBottom={true}>\r\n        <Divider />\r\n        <div className=\"orderSummary__total\">Total: {poundify(grandTotal)}</div>\r\n        <Divider />\r\n      </Typography>\r\n    ) : null;\r\n  }\r\n\r\n  function renderDiscounts(): Array<JSX.Element | null> | JSX.Element | null {\r\n    if (preDiscountTotal <= 0) {\r\n      return null;\r\n    }\r\n\r\n    return discounts.some((discount) => discount.discount > 0) ? (\r\n      discounts.map((discount, i) =>\r\n        discount.discount > 0 ? (\r\n          <ListItem key={i + \"discount\"}>\r\n            <MoneyOffIcon fontSize=\"small\" />\r\n            {`${discount.type}`} : {poundify(discount.discount)}\r\n          </ListItem>\r\n        ) : null\r\n      )\r\n    ) : (\r\n      <ListItem>No discounts applied!</ListItem>\r\n    );\r\n  }\r\n};\r\n","import React, { RefObject } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { IState } from \"../Store/IState\";\r\nimport { \r\n  actionCreators,\r\n  IOrderState \r\n} from \"../Store/OrderBundle\";\r\nimport { OrderItem } from \"../Components/OrderItem\";\r\nimport { FoodItem } from \"../Enums/FoodItems\";\r\nimport {\r\n  getDiscounts,\r\n  totalBeforeDiscounts,\r\n} from \"../Utilities/InvoiceUtilities\";\r\nimport { IDiscount } from \"../Interfaces/IDiscount\";\r\nimport { OrderSummary } from \"./OrderSummary\";\r\nimport { dispatch } from \"../../Store\";\r\n\r\ninterface IStoreProps {\r\n  order: IOrderState;\r\n}\r\n\r\ninterface IRawProps {\r\n  foodLabels: ReadonlyArray<string>;\r\n  className?: string;\r\n}\r\n\r\nexport type IOrderSectionProps = IStoreProps & IRawProps;\r\nexport const OrderSection: React.FC<IOrderSectionProps> = (\r\n  props\r\n): JSX.Element => {\r\n  const { order, foodLabels } = props;\r\n  const preDiscountTotal: number = totalBeforeDiscounts(order);\r\n  const discounts: ReadonlyArray<IDiscount> = getDiscounts(order);\r\n\r\n  const handleClearItem = (item: FoodItem) => {\r\n    dispatch(actionCreators.clearItem(item));\r\n  };\r\n  const ref: RefObject<SVGSVGElement> = React.createRef();\r\n  \r\n  return (\r\n    <div className={props.className}>\r\n      <h2 className={`${props.className}__title`}>Order Summary</h2>\r\n      {foodLabels.map((label) => {\r\n        const quantity: number = order[label as keyof typeof FoodItem].quantity;\r\n        const subtotal: number = order[label as keyof typeof FoodItem].subtotal;\r\n        if (quantity > 0) {\r\n          return (\r\n            <OrderItem\r\n              ref={ref}\r\n              key={label}\r\n              foodItem={label}\r\n              quantity={quantity}\r\n              subtotal={subtotal}\r\n              handleClearItem={handleClearItem}\r\n            />\r\n          );\r\n        }\r\n        return null;\r\n      })}\r\n      <OrderSummary preDiscountTotal={preDiscountTotal} discounts={discounts} />\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction mapStateToProps(state: Readonly<IState>): IStoreProps {\r\n  return { order: state.orderState };\r\n}\r\n\r\nexport default connect<IStoreProps, {}, {}, IState>(\r\n  mapStateToProps,\r\n  null,\r\n  null,\r\n  { forwardRef: true }\r\n)(OrderSection);\r\n","import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Modal,\r\n  DialogContent\r\n} from \"@material-ui/core\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\nimport KitchenIcon from \"@material-ui/icons/Kitchen\";\r\n\r\n\r\nimport OrderSection from \"./OrderSection\";\r\nimport { \r\n  getInitialOrderState, \r\n  IOrderState \r\n} from \"../Store/OrderBundle\";\r\nimport \"../Styles/Modal.scss\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport const ButtonAppBar = React.forwardRef((props, ref) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const defaultState: IOrderState = getInitialOrderState();\r\n  const foodLabels: ReadonlyArray<string> = Object.keys(defaultState);\r\n\r\n  const body = <OrderSection foodLabels={foodLabels} className=\"modalBody\" />;\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <KitchenIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Soup Kitchen\r\n          </Typography>\r\n          <ShoppingCartIcon />\r\n          <Button color=\"inherit\" onClick={handleOpen}>\r\n            Cart\r\n          </Button>\r\n          <Modal\r\n            tabIndex={-1}\r\n            open={open}\r\n            onClose={handleClose}\r\n            className=\"modal\"\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n            <DialogContent>{body}</DialogContent>\r\n          </Modal>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState } from \"react\";\r\nimport AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport IndeterminateCheckBoxBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n} from \"@material-ui/core\";\r\n\r\nimport { FoodItem } from \"../Enums/FoodItems\";\r\nimport \"../Styles/MenuItem.scss\";\r\nimport { capitalise } from \"../Utilities/InvoiceUtilities\";\r\n\r\ninterface IMenuItem {\r\n  addToCart: (foodItem: FoodItem, quantityState: number) => void;\r\n  label: string;\r\n}\r\n\r\nexport const MenuItem: React.FC<IMenuItem> = ({ addToCart, label }) => {\r\n  const [quantityState, setQuantityState] = useState(0);\r\n  const [updatedState, setUpdatedState] = useState(false);\r\n\r\n  const handleAddToCart = () => {\r\n    addToCart(foodItem, quantityState);\r\n    setQuantityState(0);\r\n    setUpdatedState(true);\r\n    setTimeout(() => setUpdatedState(false), 1500);\r\n  };\r\n\r\n  const handleIncrease = () => {\r\n    setQuantityState(quantityState + 1);\r\n  };\r\n  const handleDecrease = () => {\r\n    if (quantityState > 0) {\r\n      setQuantityState(quantityState - 1);\r\n    }\r\n  };\r\n  const foodItem: FoodItem = FoodItem[label as keyof typeof FoodItem];\r\n  return (\r\n    <Card className=\"menuItem\">\r\n      <CardHeader title={capitalise(label)}></CardHeader>\r\n      <div className={`menuItem__image menuItem__image--${label}`} />\r\n      <div>\r\n        <AddBoxIcon\r\n          fontSize=\"large\"\r\n          color=\"action\"\r\n          onClick={handleIncrease}\r\n        ></AddBoxIcon>\r\n        <IndeterminateCheckBoxBoxIcon\r\n          fontSize=\"large\"\r\n          color=\"action\"\r\n          onClick={handleDecrease}\r\n        ></IndeterminateCheckBoxBoxIcon>\r\n      </div>\r\n      <CardContent>\r\n        <Typography\r\n          variant=\"body2\"\r\n          color=\"textSecondary\"\r\n          component=\"p\"\r\n        ></Typography>\r\n        <Button\r\n          onClick={handleAddToCart}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n        >\r\n          Update cart\r\n        </Button>\r\n      </CardContent>\r\n      {updatedState ? <p>Updated!</p> : <p>Quantity: {quantityState}</p>}\r\n    </Card>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { dispatch } from \"../../Store\";\r\nimport { FoodItem } from \"../Enums/FoodItems\";\r\nimport { actionCreators } from \"../Store/OrderBundle\";\r\nimport \"../Styles/MenuSection.scss\";\r\nimport { MenuItem } from \"./MenuItem\";\r\n\r\ninterface IMenuSection {\r\n  foodLabels: ReadonlyArray<string>;\r\n}\r\nexport const MenuSection: React.FC<IMenuSection> = ({\r\n  foodLabels,\r\n}): JSX.Element => {\r\n  const addToCart = \r\n    (foodItem: FoodItem, quantity: number): void => {\r\n      dispatch(actionCreators.addToCart(foodItem, quantity));\r\n    };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"menuSection\">\r\n        {foodLabels.map((label) => {\r\n          return <MenuItem label={label} key={label} addToCart={addToCart} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { \r\n  getInitialOrderState, \r\n  IOrderState \r\n} from \"../Store/OrderBundle\";\r\nimport { ButtonAppBar } from \"./AppBar\";\r\nimport { MenuSection } from \"./MenuSection\";\r\nimport \"../Styles/MenuSection.scss\";\r\nimport \"../Styles/Container.scss\";\r\n\r\nexport const Container = () => {\r\n  const defaultState: IOrderState = getInitialOrderState();\r\n  const foodLabels: ReadonlyArray<string> = Object.keys(defaultState);\r\n  const ref = React.createRef();\r\n  return (\r\n    <div className=\"container\">\r\n      <ButtonAppBar ref={ref} />\r\n      <span className=\"container__image\"></span>\r\n      <MenuSection foodLabels={foodLabels} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { Container } from \"./Main/Components/Container\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Store } from \"redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore, { setStore } from \"./Store\";\nimport { IState } from \"./Main/Store/IState\";\n\nconst store = configureStore() as Store<IState>;\nsetStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}